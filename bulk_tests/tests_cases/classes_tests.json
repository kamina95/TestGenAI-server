[
  {
    "code": "package temp; \n\npublic class NoteMarker {\n    public static String checkNotes(int notes){\n        String result = \"\";\n        if(notes>=0 && notes<4){\n            result = \"fail\";\n        }else if(notes>=4 && notes < 6){\n            result = \"second class\";\n        }else if(notes >= 6 && notes <=10){\n            result = \"first class\";\n        }else{\n            result = \"incorrect number\";\n        }\n        return result;\n    }\n}",
    "tests": "package temp; \n\nimport org.junit.jupiter.api.Assertions;\nimport org.junit.jupiter.api.Test;\npublic class NoteMarkerTest {\n    @Test\n    void checkNotesFirstClass() {\n        String result = NoteMarker.checkNotes(7);\n        Assertions.assertEquals(\"first class\", result);\n    }\n}"
  },
  {
    "code": "public class Book {\n    private String title;\n    private String author;\n    private int yearPublished;\n\n    public Book(String title, String author, int yearPublished) {\n        this.title = title;\n        this.author = author;\n        this.yearPublished = yearPublished;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public int getYearPublished() {\n        return yearPublished;\n    }\n\n    public String getTitleAndAuthor() {\n        return title + \" by \" + author;\n    }\n\n    public boolean isClassic() {\n        return yearPublished < 1970;\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class BookTest {\n\n    @Test\n    public void testGetTitleAndAuthor() {\n        Book book = new Book(\"1984\", \"George Orwell\", 1949);\n        assertEquals(\"1984 by George Orwell\", book.getTitleAndAuthor(), \"The getTitleAndAuthor method should return the title and author formatted correctly.\");\n    }\n\n    @Test\n    public void testIsClassic() {\n        Book classicBook = new Book(\"To Kill a Mockingbird\", \"Harper Lee\", 1960);\n        Book modernBook = new Book(\"The Road\", \"Cormac McCarthy\", 2006);\n\n        assertTrue(classicBook.isClassic(), \"The book should be considered a classic.\");\n        assertFalse(modernBook.isClassic(), \"The book should not be considered a classic.\");\n    }\n}"
  },
  {
    "code": "public class TemperatureSensor {\n    private double temperatureCelsius;\n\n    public TemperatureSensor(double temperatureCelsius) {\n        this.temperatureCelsius = temperatureCelsius;\n    }\n\n    public double getTemperatureCelsius() {\n        return temperatureCelsius;\n    }\n\n    public void setTemperatureCelsius(double temperatureCelsius) {\n        this.temperatureCelsius = temperatureCelsius;\n    }\n\n    public double getTemperatureFahrenheit() {\n        return (temperatureCelsius * 9 / 5) + 32;\n    }\n\n    public boolean isTemperatureInRange(double lowerBoundCelsius, double upperBoundCelsius) {\n        return temperatureCelsius >= lowerBoundCelsius && temperatureCelsius <= upperBoundCelsius;\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class TemperatureSensorTest {\n\n    @Test\n    public void testGetTemperatureFahrenheit() {\n        TemperatureSensor sensor = new TemperatureSensor(0); // Freezing point of water\n        assertEquals(32, sensor.getTemperatureFahrenheit(), 0.01, \"0°C should be 32°F.\");\n    }\n\n    @Test\n    public void testIsTemperatureInRange() {\n        TemperatureSensor sensor = new TemperatureSensor(20); // Room temperature\n        \n        assertTrue(sensor.isTemperatureInRange(15, 25), \"20°C should be within the range 15°C to 25°C.\");\n        assertFalse(sensor.isTemperatureInRange(21, 30), \"20°C should not be within the range 21°C to 30°C.\");\n    }\n}"
  },
  {
    "code": "public class TransactionProcessor {\n    private double accountBalance;\n\n    public TransactionProcessor(double initialBalance) {\n        this.accountBalance = initialBalance;\n    }\n\n    public double getAccountBalance() {\n        return accountBalance;\n    }\n\n    public boolean deposit(double amount) {\n        if (amount > 0) {\n            accountBalance += amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public boolean withdraw(double amount) {\n        if (amount > 0 && amount <= accountBalance) {\n            accountBalance -= amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    public String accountSummary() {\n        return \"The current account balance is: $\" + accountBalance;\n    }\n\n    public boolean transfer(TransactionProcessor recipientAccount, double amount) {\n        if (withdraw(amount)) {\n            return recipientAccount.deposit(amount);\n        }\n        return false;\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class TransactionProcessorTest {\n\n    @Test\n    public void testDepositPositiveAmount() {\n        TransactionProcessor account = new TransactionProcessor(100.0);\n        assertTrue(account.deposit(50.0), \"Depositing a positive amount should succeed.\");\n        assertEquals(150.0, account.getAccountBalance(), 0.01, \"Account balance should be updated correctly after deposit.\");\n    }\n\n    @Test\n    public void testWithdrawExceedingAmount() {\n        TransactionProcessor account = new TransactionProcessor(100.0);\n        assertFalse(account.withdraw(150.0), \"Withdrawal of amount exceeding account balance should fail.\");\n    }\n}"
  },
  {
    "code": "import java.util.ArrayList;\nimport java.util.List;\n\npublic class PlaylistManager {\n    private List<String> songs = new ArrayList<>();\n\n    public boolean addSong(String song) {\n        if (!song.isEmpty() && !songs.contains(song)) {\n            songs.add(song);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean removeSong(String song) {\n        return songs.remove(song);\n    }\n\n    public boolean containsSong(String song) {\n        return songs.contains(song);\n    }\n\n    public String getPlaylist() {\n        return String.join(\", \", songs);\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class PlaylistManagerTest {\n\n    @Test\n    public void testAddSong() {\n        PlaylistManager playlistManager = new PlaylistManager();\n        assertTrue(playlistManager.addSong(\"Song A\"), \"Adding a new song should return true.\");\n        assertTrue(playlistManager.containsSong(\"Song A\"), \"The playlist should contain the added song.\");\n    }\n\n    @Test\n    public void testRemoveSong() {\n        PlaylistManager playlistManager = new PlaylistManager();\n        playlistManager.addSong(\"Song A\");\n        assertTrue(playlistManager.removeSong(\"Song A\"), \"Removing an existing song should return true.\");\n        assertFalse(playlistManager.containsSong(\"Song A\"), \"The playlist should not contain the removed song.\");\n    }\n}"
  },
  {
    "code": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class FlightBookingSystem {\n    private Map<String, Integer> flights = new HashMap<>();\n\n    public boolean addFlight(String flightNumber, int capacity) {\n        if (!flights.containsKey(flightNumber) && capacity > 0) {\n            flights.put(flightNumber, capacity);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean bookSeat(String flightNumber) {\n        if (flights.containsKey(flightNumber) && flights.get(flightNumber) > 0) {\n            flights.put(flightNumber, flights.get(flightNumber) - 1);\n            return true;\n        }\n        return false;\n    }\n\n    public int checkAvailability(String flightNumber) {\n        return flights.getOrDefault(flightNumber, -1);\n    }\n\n    public boolean cancelFlight(String flightNumber) {\n        if (flights.containsKey(flightNumber)) {\n            flights.remove(flightNumber);\n            return true;\n        }\n        return false;\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class FlightBookingSystemTest {\n\n    @Test\n    public void testAddFlight() {\n        FlightBookingSystem system = new FlightBookingSystem();\n        assertTrue(system.addFlight(\"FL123\", 100), \"Adding a new flight should succeed.\");\n        assertFalse(system.addFlight(\"FL123\", 100), \"Adding a duplicate flight should fail.\");\n    }\n\n    @Test\n    public void testBookSeat() {\n        FlightBookingSystem system = new FlightBookingSystem();\n        system.addFlight(\"FL123\", 2);\n\n        assertTrue(system.bookSeat(\"FL123\"), \"Booking a seat on an available flight should succeed.\");\n        system.bookSeat(\"FL123\"); // Book the last seat\n        assertFalse(system.bookSeat(\"FL123\"), \"Booking a seat on a full flight should fail.\");\n    }\n\n    @Test\n    public void testCancelFlight() {\n        FlightBookingSystem system = new FlightBookingSystem();\n        system.addFlight(\"FL123\", 100);\n        assertTrue(system.cancelFlight(\"FL123\"), \"Canceling an existing flight should succeed.\");\n        assertFalse(system.cancelFlight(\"FL123\"), \"Canceling a non-existent flight should fail.\");\n    }\n}"
  },
  {
    "code": "import java.util.HashMap;\nimport java.util.Map;\n\npublic class TaskManager {\n    private Map<Integer, String> tasks = new HashMap<>();\n    private Map<Integer, Boolean> taskStatus = new HashMap<>();\n    private int nextTaskId = 1;\n\n    public int addTask(String description) {\n        if (description == null || description.trim().isEmpty()) {\n            throw new IllegalArgumentException(\"Task description cannot be empty.\");\n        }\n        int taskId = nextTaskId++;\n        tasks.put(taskId, description);\n        taskStatus.put(taskId, false);\n        return taskId;\n    }\n\n    public boolean completeTask(int taskId) {\n        if (!tasks.containsKey(taskId)) {\n            return false;\n        }\n        taskStatus.put(taskId, true);\n        return true;\n    }\n\n    public String getTaskDescription(int taskId) {\n        return tasks.get(taskId);\n    }\n\n    public boolean isTaskCompleted(int taskId) {\n        return taskStatus.getOrDefault(taskId, false);\n    }\n\n    public Map<Integer, String> getAllTasks() {\n        return tasks;\n    }\n\n    public Map<Integer, Boolean> getAllTaskStatuses() {\n        return taskStatus;\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class TaskManagerTest {\n\n    @Test\n    public void testAddTask() {\n        TaskManager manager = new TaskManager();\n        int taskId = manager.addTask(\"Complete the project documentation.\");\n        assertNotNull(manager.getTaskDescription(taskId), \"Task description should be stored correctly.\");\n    }\n\n    @Test\n    public void testCompleteTask() {\n        TaskManager manager = a new TaskManager();\n        int taskId = manager.addTask(\"Submit timesheet.\");\n        assertTrue(manager.completeTask(taskId), \"Completing an existing task should return true.\");\n        assertTrue(manager.isTaskCompleted(taskId), \"Task should be marked as completed.\");\n    }\n}"
  },
  {
    "code": "import java.time.LocalDateTime;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class EventScheduler {\n    private Map<String, LocalDateTime> events = new HashMap<>();\n\n    public boolean addEvent(String eventName, LocalDateTime eventTime) {\n        if (eventName == null || eventName.trim().isEmpty() || eventTime == null) {\n            throw new IllegalArgumentException(\"Event name and time cannot be null or empty.\");\n        }\n        if (events.containsKey(eventName)) {\n            return false;\n        }\n        events.put(eventName, eventTime);\n        return true;\n    }\n\n    public boolean rescheduleEvent(String eventName, LocalDateTime newEventTime) {\n        if (!events.containsKey(eventName) || newEventTime == null) {\n            return false;\n        }\n        events.put(eventName, newEventTime);\n        return true;\n    }\n\n    public boolean cancelEvent(String eventName) {\n        if (!events.containsKey(eventName)) {\n            return false;\n        }\n        events.remove(eventName);\n        return true;\n    }\n\n    public LocalDateTime getEventTime(String eventName) {\n        return events.get(eventName);\n    }\n\n    public Map<String, LocalDateTime> getAllEvents() {\n        return new HashMap<>(events);\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\nimport java.time.LocalDateTime;\n\npublic class EventSchedulerTest {\n\n    @Test\n    public void testAddEvent() {\n        EventScheduler scheduler = new EventScheduler();\n        LocalDateTime eventTime = LocalDateTime.of(2024, 4, 20, 12, 0);\n        assertTrue(scheduler.addEvent(\"Team Meeting\", eventTime), \"Adding a new event should succeed.\");\n        assertEquals(eventTime, scheduler.getEventTime(\"Team Meeting\"), \"Event time should match the added time.\");\n    }\n\n    @Test\n    public void testRescheduleEvent() {\n        EventScheduler scheduler = new EventScheduler();\n        LocalDateTime initialTime = LocalDateTime.of(2024, 4, 20, 12, 0);\n        LocalDateTime newTime = LocalDateTime.of(2024, 4, 21, 12, 0);\n        scheduler.addEvent(\"Project Deadline\", initialTime);\n        assertTrue(scheduler.rescheduleEvent(\"Project Deadline\", newTime), \"Rescheduling should succeed.\");\n        assertEquals(newTime, scheduler.getEventTime(\"Project Deadline\"), \"Event time should be updated to the new time.\");\n    }\n\n    @Test\n    public void testCancelEvent() {\n        EventScheduler scheduler = new EventScheduler();\n        scheduler.addEvent(\"Annual Review\", LocalDateTime.now());\n        assertTrue(scheduler.cancelEvent(\"Annual Review\"), \"Cancelling an existing event should succeed.\");\n        assertNull(scheduler.getEventTime(\"Annual Review\"), \"Canceled event should return null for time.\");\n    }\n}"
  },
  {
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class RealEstateManager {\n    private List<Property> properties;\n\n    public RealEstateManager() {\n        this.properties = new ArrayList<>();\n    }\n\n    public boolean addProperty(Property property) {\n        if (property == null || properties.contains(property)) {\n            return false;\n        }\n        properties.add(property);\n        return true;\n    }\n\n    public boolean updatePropertyPrice(String propertyId, double newPrice) {\n        for (Property property : properties) {\n            if (property.getId().equals(propertyId)) {\n                property.setPrice(newPrice);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public List<Property> searchByLocation(String location) {\n        return properties.stream()\n                         .filter(p -> p.getLocation().equalsIgnoreCase(location))\n                         .collect(Collectors.toList());\n    }\n\n    public List<Property> searchByPriceRange(double minPrice, double maxPrice) {\n        return properties.stream()\n                         .filter(p -> p.getPrice() >= minPrice && p.getPrice() <= maxPrice)\n                         .collect(Collectors.toList());\n    }\n\n    public List<Property> getAllProperties() {\n        return new ArrayList<>(properties);\n    }\n}\n\nclass Property {\n    private String id;\n    private String location;\n    private double price;\n\n    public Property(String id, String location, double price) {\n        this.id = id;\n        this.location = location;\n        this.price = price;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public void setPrice(double price) {\n        this.price = price;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n\n        Property property = (Property) o;\n\n        return id != null ? id.equals(property.id) : property.id == null;\n    }\n\n    @Override\n    public int hashCode() {\n        return id != null ? id.hashCode() : 0;\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\n\npublic class RealEstateManagerTest {\n    private RealEstateManager manager;\n\n    @BeforeEach\n    public void setUp() {\n        manager = new RealEstateManager();\n        manager.addProperty(new Property(\"1\", \"New York\", 1000000));\n        manager.addProperty(new Property(\"2\", \"California\", 1500000));\n    }\n\n    @Test\n    public void testAddProperty() {\n        Property newProperty = new Property(\"3\", \"Florida\", 900000);\n        assertTrue(manager.addProperty(newProperty), \"Adding a new property should succeed.\");\n    }\n\n    @Test\n    public void testUpdatePropertyPrice() {\n        assertTrue(manager.updatePropertyPrice(\"1\", 1100000), \"Updating property price should succeed.\");\n        assertEquals(1100000, manager.getAllProperties().get(0).getPrice(), \"Property price should be updated.\");\n    }\n\n    @Test\n    public void testSearchByLocation() {\n        List<Property> results = manager.searchByLocation(\"New York\");\n        assertEquals(1, results.size(), \"Should find one property in New York.\");\n    }\n\n    @Test\n    public void testSearchByPriceRange() {\n        List<Property> results = manager.searchByPriceRange(1000000, 1600000);\n        assertEquals(2, results.size(), \"Should find two properties within the price range.\");\n    }\n}"
  },
  {
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class HealthcareProviderDirectory {\n    private List<HealthcareProvider> providers;\n    private List<String> auditLog;\n\n    public HealthcareProviderDirectory() {\n        this.providers = new ArrayList<>();\n        this.auditLog = new ArrayList<>();\n    }\n\n    public boolean addProvider(HealthcareProvider provider) {\n        if (provider == null || providers.contains(provider)) {\n            return false;\n        }\n        providers.add(provider);\n        auditLog.add(\"Added provider: \" + provider.toString());\n        return true;\n    }\n\n    public boolean updateProvider(int providerId, String newLocation, String newSpecialty) {\n        for (HealthcareProvider provider : providers) {\n            if (provider.getId() == providerId) {\n                provider.setLocation(newLocation);\n                provider.setSpecialty(newSpecialty);\n                auditLog.add(\"Updated provider: \" + provider.toString());\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public List<HealthcareProvider> searchBySpecialty(String specialty) {\n        return providers.stream()\n            .filter(provider -> provider.getSpecialty().equalsIgnoreCase(specialty))\n            .collect(Collectors.toList());\n    }\n\n    public List<HealthcareProvider> searchByLocation(String location) {\n        return providers.stream()\n            .filter(provider -> provider.getLocation().equalsIgnoreCase(location))\n            .collect(Collectors.toList());\n    }\n\n    public List<String> getAuditLog() {\n        return new ArrayList<>(auditLog);\n    }\n}\n\nclass HealthcareProvider {\n    private static int idCounter = 0;\n    private int id;\n    private String name;\n    private String location;\n    private String specialty;\n\n    public HealthcareProvider(String name, String location, String specialty) {\n        this.id = ++idCounter;\n        this.name = name;\n        this.location = location;\n        this.specialty = specialty;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getLocation() {\n        return location;\n    }\n\n    public void setLocation(String location) {\n        this.location = location;\n    }\n\n    public String getSpecialty() {\n        return specialty;\n    }\n\n    public void setSpecialty(String specialty) {\n        this.specialty = specialty;\n    }\n\n    @Override\n    public String toString() {\n        return \"HealthcareProvider{id=\" + id + \", name='\" + name + \"', location='\" + location + \"', specialty='\" + specialty + \"'}\";\n    }\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\nimport java.util.List;\n\npublic class HealthcareProviderDirectoryTest {\n    private HealthcareProviderDirectory directory;\n\n    @BeforeEach\n    public void setUp() {\n        directory = new HealthcareProviderDirectory();\n        directory.addProvider(new HealthcareProvider(\"Dr. Smith\", \"New York\", \"Cardiology\"));\n        directory.addProvider(new HealthcareProvider(\"Dr. Jones\", \"California\", \"Dermatology\"));\n    }\n\n    @Test\n    public void testAddProvider() {\n        HealthcareProvider newProvider = new HealthcareProvider(\"Dr. Brown\", \"Texas\", \"Pediatrics\");\n        assertTrue(directory.addProvider(newProvider), \"Adding a new provider should succeed.\");\n    }\n\n    @Test\n    public void testUpdateProvider() {\n        assertTrue(directory.updateProvider(1, \"New York\", \"Internal Medicine\"), \"Updating existing provider should succeed.\");\n    }\n\n    @Test\n    public void testSearchBySpecialty() {\n        List<HealthcareProvider> results = directory.searchBySpecialty(\"Cardiology\");\n        assertEquals(1, results.size(), \"Should find one provider with specialty Cardiology.\");\n    }\n\n    @Test\n    public void testSearchByLocation() {\n        List<HealthcareProvider> results = directory.searchByLocation(\"New York\");\n        assertEquals(1, results.size(), \"Should find one provider in New York.\");\n    }\n\n    @Test\n    public void testAuditLog() {\n        directory.updateProvider(1, \"New York\", \"Internal Medicine\");\n        List<String> log = directory.getAuditLog();\n        assertTrue(log.size() > 0, \"Audit log should contain entries.\");\n    }\n}"
  },
  {
    "code": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.UUID;\nimport java.util.stream.Collectors;\n\npublic class ProjectManagementSystem {\n    private List<Project> projects;\n\n    public ProjectManagementSystem() {\n        this.projects = new ArrayList<>();\n    }\n\n    public String addProject(String projectName) {\n        Project project = new Project(projectName);\n        projects.add(project);\n        return project.getId();\n    }\n\n    public boolean addTaskToProject(String projectId, String taskDescription, TaskPriority priority) {\n        Project project = findProjectById(projectId);\n        if (project != null) {\n            Task newTask = new Task(taskDescription, priority);\n            project.addTask(newTask);\n            return true;\n        }\n        return false;\n    }\n\n    public boolean updateTaskStatus(String projectId, String taskId, TaskStatus newStatus) {\n        Project project = findProjectById(projectId);\n        if (project != null) {\n            return project.updateTaskStatus(taskId, newStatus);\n        }\n        return false;\n    }\n\n    public List<Task> getTasksByPriority(String projectId, TaskPriority priority) {\n        Project project = findProjectById(projectId);\n        if (project != null) {\n            return project.getTasks().stream()\n                .filter(task -> task.getPriority() == priority)\n                .collect(Collectors.toList());\n        }\n        return new ArrayList<>();\n    }\n\n    private Project findProjectById(String projectId) {\n        for (Project project : projects) {\n            if (project.getId().equals(projectId)) {\n                return project;\n            }\n        }\n        return null;\n    }\n\n    public List<Project> getAllProjects() {\n        return projects;\n    }\n}\n\nclass Project {\n    private String id;\n    private String name;\n    private List<Task> tasks;\n\n    public Project(String name) {\n        this.id = UUID.randomUUID().toString();\n        this.name = name;\n        this.tasks = new ArrayList<>();\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public List<Task> getTasks() {\n        return tasks;\n    }\n\n    public void addTask(Task task) {\n        tasks.add(task);\n    }\n\n    public boolean updateTaskStatus(String taskId, TaskStatus newStatus) {\n        for (Task task : tasks) {\n            if (task.getId().equals(taskId)) {\n                task.setStatus(newStatus);\n                return true;\n            }\n        }\n        return false;\n    }\n}\n\nclass Task {\n    private String id;\n    private String description;\n    private TaskStatus status;\n    private TaskPriority priority;\n\n    public Task(String description, TaskPriority priority) {\n        this.id = UUID.randomUUID().toString();\n        this.description = description;\n        this.status = TaskStatus.PENDING;\n        this.priority = priority;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getDescription() {\n        return description;\n    }\n\n    public TaskStatus getStatus() {\n        return status;\n    }\n\n    public void setStatus(TaskStatus status) {\n        this.status = status;\n    }\n\n    public TaskPriority getPriority() {\n        return priority;\n    }\n}\n\nenum TaskStatus {\n    PENDING,\n    IN_PROGRESS,\n    COMPLETED\n}\n\nenum TaskPriority {\n    LOW,\n    MEDIUM,\n    HIGH\n}",
    "tests": "import static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Test;\n\npublic class ProjectManagementSystemTest {\n    private ProjectManagementSystem system;\n\n    @BeforeEach\n    public void setUp() {\n        system = new ProjectManagementSystem();\n    }\n\n    @Test\n    public void testAddProject() {\n        String projectId = system.addProject(\"New Software Development\");\n        assertNotNull(projectId, \"Project ID should not be null after adding a project.\");\n    }\n\n    @Test\n    public void testAddTaskToProject() {\n        String projectId = system.addProject(\"Web Design Project\");\n        assertTrue(system.addTaskToProject(projectId, \"Design Homepage\", TaskPriority.HIGH), \"Adding task to the project should succeed.\");\n    }\n\n    @Test\n    public void testUpdateTaskStatus() {\n        String projectId = system.addProject(\"App Development\");\n        String taskId = system.addTaskToProject(projectId, \"Develop Login Feature\", TaskPriority.MEDIUM) ? system.getAllProjects().get(0).getTasks().get(0).getId() : null;\n        assertTrue(system.updateTaskStatus(projectId, taskId, TaskStatus.COMPLETED), \"Updating task status should succeed.\");\n    }\n\n    @Test\n    public void testGetTasksByPriority() {\n        String projectId = system.addProject(\"Marketing Campaign\");\n        system.addTaskToProject(projectId, \"Create Adverts\", TaskPriority.LOW);\n        system.addTaskToProject(projectId, \"Social Media Promotion\", TaskPriority.LOW);\n        List<Task> tasks = system.getTasksByPriority(projectId, TaskPriority.LOW);\n        assertEquals(2, tasks.size(), \"Should retrieve all tasks of LOW priority.\");\n    }\n}"
  }


]
